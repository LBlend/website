---
export const prerender = false;

import BaseHead from "@components/BaseHead.astro";
import ArrowDown from "@elements/ArrowDown.astro";
import BlogList from "@sections/BlogList.astro";
import Footer from "@sections/Footer.astro";
import Header from "@sections/Header.astro";
import Hero from "@sections/Hero.astro";
import Intro from "@sections/Intro.astro";
import Microblog from "@sections/Microblog.astro";
import RecentlyLikedMedia from "@sections/RecentlyLikedMedia.astro";
import RecentlyLikedSongs from "@sections/RecentlyLikedSongs.astro";
import Stats from "@sections/Stats.astro";
import VisitedPlaces from "@sections/VisitedPlaces.astro";

import { SITE_DESCRIPTION, SITE_TITLE } from "src/consts";
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <body class="flex flex-col gap-2">
    <div class="grid min-h-dvh grid-rows-[auto_1fr]">
      <Header />
      <Hero />
      <ArrowDown />
    </div>
    <div id="main" class="grid grid-cols-3 gap-8 px-2 pt-8 lg:auto-rows-fr lg:items-start">
      <main class="col-span-3 flex flex-col flex-wrap gap-18 lg:col-span-2">
        <Intro />
        <BlogList />
        <VisitedPlaces />
        <Microblog numberOfPosts={3} />
        <RecentlyLikedMedia />
      </main>
      <aside
        class="inner-scrollbar bg-backgroundlight col-span-3 mx-4 my-18 flex flex-col flex-wrap gap-6 overflow-y-auto rounded-2xl shadow-lg/40 lg:sticky lg:top-8 lg:col-span-1 lg:mx-0 lg:my-0 lg:max-h-full lg:self-start"
      >
        <RecentlyLikedSongs />
      </aside>
    </div>
    <section class="col-span-3 mt-18 flex flex-wrap justify-center gap-6">
      <Stats />
    </section>
    <Footer />
  </body>
</html>

<script>
  // Set max height of recently liked songs section to match main section height
  const mainSection = document.querySelector("main");
  const recentlyLikedSongsSection = document.querySelector("aside");

  function updateRecentlyLikedSongsHeight() {
    if (mainSection && recentlyLikedSongsSection) {
      if (window.innerWidth > 1024) {
        const mainHeight = mainSection.offsetHeight;
        recentlyLikedSongsSection.style.maxHeight = `${mainHeight}px`;
      } else {
        recentlyLikedSongsSection.style.maxHeight = `${window.innerHeight * 0.9}px`;
      }
    }
  }

  // Wait for all content to load, then set height
  function initializeHeight() {
    setTimeout(() => {
      updateRecentlyLikedSongsHeight();
      // Try again in case of slow loading content
      setTimeout(updateRecentlyLikedSongsHeight, 1000);
    }, 100);
  }

  // Use Intersection Observer to detect when main content is visible and settled
  if (mainSection) {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          setTimeout(updateRecentlyLikedSongsHeight, 100);
        }
      });
    });
    observer.observe(mainSection);
  }

  // Initial setup
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeHeight);
  } else {
    initializeHeight();
  }

  // Handle window resize
  window.addEventListener("resize", updateRecentlyLikedSongsHeight);

  // Also try after page load
  window.addEventListener("load", () => {
    setTimeout(updateRecentlyLikedSongsHeight, 100);
  });
</script>
