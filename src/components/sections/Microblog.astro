---
import { type MicroblogMessage, getDiscordMessages } from "@api/microblog/discord";
import { Image } from "astro:assets";
import { parse } from "discord-markdown-parser";

import "@styles/discordpost.css";

const discordPosts = await getDiscordMessages();

const { numberOfPosts } = Astro.props;
const totalNumberOfPosts = discordPosts.length;
if (numberOfPosts && discordPosts.length > numberOfPosts) {
  discordPosts.length = numberOfPosts;
}

// TODO: Add list support
const discordMdToHtml = (post: MicroblogMessage) => {
  const ast = parse(post.content, "extended");

  const processNode = (node: any): string => {
    switch (node.type) {
      case "text":
        return node.content;
      case "strong":
        return `<strong>${node.content.map((c: any) => processNode(c)).join("")}</strong>`;
      case "em":
        return `<em>${node.content.map((c: any) => processNode(c)).join("")}</em>`;
      case "strikethrough":
        return `<del>${node.content.map((c: any) => processNode(c)).join("")}</del>`;
      case "spoiler":
        return `<span class="spoiler">${node.content.map((c: any) => processNode(c)).join("")}</span>`;
      case "channel":
        return `<span class="channel">#${node.id}</span>`;
      case "user":
        return `<span class="user">@${node.id}</span>`;
      case "url":
        return `<a href="${node.target}" target="_blank" rel="noopener noreferrer">${node.content.map((c: any) => processNode(c)).join("")}</a>`;
      case "link":
        return `<a href="${node.target}" target="_blank" rel="noopener noreferrer">${node.content.map((c: any) => processNode(c)).join("")}</a>`;
      case "br":
        return "<br>";
      case "twemoji":
        return node.name;
      case "emoji":
        const emoji = post.emojis?.find((e) => e.id === node.id);
        if (emoji) {
          return `<img src="${emoji.url}" alt="${emoji.name}" class="inline-block h-5 w-5" />`;
        }
        return `:${node.name}:`;
      case "heading":
        return `<h${node.level}>${node.content.map((c: any) => processNode(c)).join("")}</h${node.level}>`;
      case "subtext":
        return `<span class="subtext">${node.content.map((c: any) => processNode(c)).join("")}</span>`;
      case "blockQuote":
        return `<blockquote>${node.content.map((c: any) => processNode(c)).join("")}</blockquote>`;
      case "inlineCode":
        return `<code>${node.content}</code>`;
      case "codeBlock":
        return `<pre><code>${node.content}</code></pre>`;
      default:
        return "";
    }
  };

  return ast.map((node) => processNode(node)).join("");
};
---

<section class="grid grid-cols-1 gap-4 rounded-2xl bg-[#323339] py-6 shadow-lg/30">
  {/* Header */}
  <div class="border-b border-[#3e3f45] pb-4 pl-4 md:pl-10">
    <h2 class="text-2xl text-[#dcdddf]"><span class="mr-4 text-[#9b9ca3]">#</span>microblog</h2>
  </div>
  {/* Posts */}
  <div class="flex flex-col gap-8 px-4 py-4 md:px-10">
    {discordPosts.length === 0 && <p class="text-gray-400">No posts available.</p>}

    {
      discordPosts.map((post: MicroblogMessage) => (
        <article class="discord flex items-start gap-4 md:gap-6">
          {/* Avatar */}
          <Image
            src={post.author.avatarUrl}
            alt={post.author.globalName}
            loading="lazy"
            width={48}
            height={48}
            class="h-12 w-12 shrink-0 rounded-full"
          />
          <div class="min-w-0 flex-1">
            {/* Author and Timestamp */}
            <div class="flex items-center gap-2">
              {/* Tailwind didn't work for some reason so inlinine styling it is */}
              <author class="font-bold" style={`color: ${post.author.color}`}>
                {post.author.globalName}
              </author>
              <time class="text-sm text-[#96979e]">
                {new Date(post.timestamp).toLocaleDateString()},{" "}
                {new Date(post.timestamp).toLocaleTimeString().replace(/:\d{2} /, " ")}
              </time>
            </div>
            {/* Content */}
            <p class="break-words text-[#dddee0]" set:html={discordMdToHtml(post)} />
            {/* Attachments */}
            {post.attachments && post.attachments.length > 0 && (
              <div class="mt-2 grid grid-cols-2 gap-1 md:grid-cols-3 [&>*:first-child:nth-child(odd)]:col-span-2 md:[&>*:first-child:nth-child(odd)]:col-span-1">
                {post.attachments.map((attachment) => (
                  <div class="aspect-square rounded-lg">
                    {attachment.contentType?.startsWith("image/") && (
                      <a href={attachment.url} target="_blank" rel="noopener noreferrer">
                        <Image
                          src={attachment.url}
                          alt={attachment.filename}
                          width={256}
                          height={256}
                          class="h-full w-full object-cover"
                        />
                      </a>
                    )}
                    {attachment.contentType?.startsWith("video/") && (
                      <div class="relative aspect-square">
                        <video src={attachment.url} controls class="absolute inset-0 h-full w-full object-contain" />
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </article>
      ))
    }
  </div>
  {/* View all link */}
  {
    Astro.url.pathname !== "/microblog" && discordPosts.length > 0 && totalNumberOfPosts > numberOfPosts ? (
      <div class="mt-8 text-center">
        <a href="/microblog">View all</a>
      </div>
    ) : null
  }
</section>
